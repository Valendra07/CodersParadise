//Brute Force 

TC-O(m*n)
SC-O(1)

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        int mini = 500;
        int minindex = -1;
        string ans="";
        for(int i=0; i<strs.size(); i++)
            if (strs[i].size() < mini){
                mini = strs[i].size();
                minindex = i;
        }
        for(int i=0; i<mini; i++){
            char ch = strs[minindex][i];
            int j=0;
            for( int j=0; j<strs.size(); j++){
                if(ch != strs[j][i]) 
                return ans;
            }
            ans += ch;
        }
        return ans;
    }
};

//Sorting Approach
TC- O(n*m*logn)
SC-O(1)
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        sort(strs.begin(), strs.end());
        int n = strs.size();
        string first = strs[0], last = strs[n-1], ans="";
        for(int i = 0; i<min(first.size(), last.size()); i++)
       {
          if (first[i] != last[i])
              return ans;
          else
              ans+=first[i];

       }
       return ans;
    }
};

//Optimal Approach
TC
SC
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if (strs.empty()) return "";

        string pref = strs[0];
        int prefLen = pref.length();

        for (int i = 1; i < strs.size(); i++) {
            string s = strs[i];
            while (prefLen > s.length() || pref != s.substr(0, prefLen)) {
                prefLen--;
                if (prefLen == 0) {
                    return "";
                }
                pref = pref.substr(0, prefLen);
            }
        }

        return pref;        
    }
};
