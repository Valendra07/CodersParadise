bool sorted(vector<int> &arr, int n){//ISki jarurat isliye hai kyuki we found pivot considering that the array is always rotated...
    bool sorted=0;
    for(int i=0;i<n-1;i++){
        if(arr[i+1]<arr[i])
        {
           return sorted;
        }
    }
    sorted =1;
    return sorted;
}


int findPivot(vector<int>&arr, int n)
{
    bool sort = sorted(arr,n);
    if(sort)
    return 0;

    int s = 0, e = n - 1;
    while (e > s)
    {
        int mid = s + (e - s) / 2;
        if (arr[mid] >= arr[0])
        {
            s = mid + 1;
        }
        else
            e = mid;
    }
    return s;
}

int binarySearch(vector<int>&arr, int n, int k,int s,int e)
{
    while (e >= s)
    {
       int  mid = (s + e) / 2;
        if (arr[mid] == k)
        {
            return mid;
        }
        else if (k > arr[mid])
        {
            s = mid + 1;
        }
        else
        {
            e = mid - 1;
        }
    }
    return -1;
}


int search(vector<int>& arr, int n, int k)
{
    
    int ans;
    int pivotIndex = findPivot(arr, n);
    if(pivotIndex==0){
       ans=binarySearch(arr,n,k,0,n-1);
       return ans;
    }
  
    if(k>=arr[0]){
        int e = pivotIndex - 1;
        ans=binarySearch(arr, n, k, 0, e);
    }
    else {
        int s = pivotIndex;
        ans = binarySearch(arr, n, k, s, n - 1);
    }
    return ans;
}



//Other optimised way

int binarySearch(vector<int> &arr, int n, int k, int s, int e)
{
    while (e >= s)
    {
        int mid = (s + e) / 2;
        if (arr[mid] == k)
        {
            return mid;
        }
        else if (k > arr[mid])
        {
            s = mid + 1;
        }
        else
        {
            e = mid - 1;
        }
    }
    return -1;
}


int search(vector<int>& arr, int n, int k)
{
    int s=0,e=n-1,pivot=0,index=-1;

    while(s<= e){
      int  mid=s+(e-s)/2;
    if(arr[mid]<arr[0]){
        pivot=mid;
        e=mid-1;
    }

    else
    s=mid+1;
    }

    if(pivot==0||(k>=arr[pivot]&&k<=arr[n-1])){
       index= binarySearch(arr,n,k,pivot,n-1);
    }

    else if(k>=arr[0]&&k<=arr[pivot-1])
       index =binarySearch(arr,n,k,0,pivot-1);

return index;
}
