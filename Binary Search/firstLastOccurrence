//Naive Approach
int first(vector<int> &arr, int n, int k)
{
    for (int i = 0; i < n;i++){
        if(arr[i]==k)
            return i;
    }
}

int second(vector<int> &arr, int n, int k)
{
    for (int i = n-1; i >=0; i--)
    {
        if (arr[i] == k)
            return i;
    }
}

pair<int, int> firstAndLastPosition(vector<int> &arr, int n, int k)
{
    pair <int,int> p;
    p.first = first(arr,  n,  k);
    p.second = second(arr, n, k);
}

//One loop linear search
pair<int, int> firstAndLastPosition(vector<int> &arr, int n, int k)
{
    int first = -1;
    int last = -1;

    for (int i = 0; i < n; i++)
    {
        if (arr[i] == k)
        {
            if (first == -1)
            {
                first = i;
                last = i;
            }
            else
            {
                last = i;
            }
        }
    }

    return make_pair(first, last);
}



//Onoptimised BS approach 
//SPace complexity in all codes is O(1)
int firstOccurence(vector<int> &arr, int n, int k)
{
    int s = 0, e = n - 1, mid;//mid ko while mai hi declare kar skte hai
    while (e >= s)
    {
        mid = s + (e - s) / 2; // int mid=s+(e-s)/2;
        if (arr[mid] == k)
        {
            if (mid == 0)//edge case jab mid=0 hoga toh arr[mid-1] nahi nikal sakte
            {
                return mid;}
            if (arr[mid - 1] == k)//is condition ki jarurat nahi
            {
                e = mid - 1;
            }
            else
                return mid; // do condition banane ki jarurat nahi hum ans=-1 se initialise karke ans=mid store kara sakte hai is condition mai
        
        }
        else if (arr[mid] < k)
        {
            s = mid + 1;
        }
        else
        {
            e = mid - 1;
        }
    }
    return -1;
}
int lastOccurence(vector<int> &arr, int n, int k)
{
    int s = 0, e = n - 1, mid;
    while (e >= s)
    {
        mid = s + (e - s) / 2;
        if (arr[mid] == k)
        {
            if (mid == n - 1)
            {
                return mid;
            }
            else if (arr[mid + 1] == k)
            {
                s = mid + 1;
            }
            else
                return mid;
        }
        else if (arr[mid] < k)
        {
            s = mid + 1;
        }
        else
        {
            e = mid - 1;
        }
    }
    return -1;
}


pair<int, int> firstAndLastPosition(vector<int> &arr, int n, int k)
{

    pair<int, int> p; // pair ise bhi bana sakte hai return make_pair(firstOccurence , lastOccurence);
    p.first = firstOccurence(arr, n, k);
    p.second = lastOccurence(arr, n, k);
    return p;
}



//Best Approach

vector<int> searchRange(vector<int> &nums, int target)
{
    // Binary Search

    int s = 0, e = nums.size() - 1, mid, ansfirst = -1, ansSecond = -1;

    vector<int> ans;
    while (s <= e)
    {
        mid = s + (e - s) / 2;
        if (nums[mid] == target)
        {
            ansfirst = mid;
            e = mid - 1;
        }

        else if (nums[mid] > target)
            e = mid - 1;

        else
            s = mid + 1;
    }

    ans.push_back(ansfirst);

    s = 0;
    e = nums.size() - 1;
    while (s <= e)
    {

        mid = s + (e - s) / 2;

        if (nums[mid] == target)
        {
            ansSecond = mid;
            s = mid + 1;
        }

        else if (nums[mid] > target)
            e = mid - 1;

        else
            s = mid + 1;
    }

    ans.push_back(ansSecond);

    return ans;
}
